@Library('pipeline_shared_library') _
def libs = pipelineLibraries(this)
def hasChanges = false

pipeline {
    agent any
    options { quietPeriod(0) }

    parameters {
        string(name: 'SERVICE_GROUP', defaultValue: '', description: 'Service Grooup:sc,subride,subride-front')
        string(name: 'SERVICE_ID', defaultValue: '', description: 'Service ID')
        string(name: 'SERVICE_VERSION', defaultValue: '', description: 'Service Version')
        string(name: 'NFS_HOST', defaultValue: '', description: 'NFS 서버')
        string(name: 'SKIP_STAGES', defaultValue: '', description: 'Stages to skip:sonar,trivy')
    }
    /*
            envVars.NFS_HOST = "43.200.12.214"
            envVars.IMAGE_REG_CREDENTIAL = "credential_dockerhub_ondal"
            envVars.IMAGE_REG_HOST = "docker.io"
            envVars.IMAGE_REG_ORG = "hiondal"
    */
    stages {
        // 전역 변수 설정 stage
        stage("Set Global variables") {
            steps {
                script {
                    libs.setGlobalVariables()
                }
            }
        }

        // 환경 준비 stage
        stage("Prepare Environment") {
            steps {
                script {
                    hasChanges = libs.prepareEnvironment()
                }
            }
        }

        // 빌드 및 배포 stage
        stage("Build and Deploy") {
            when { expression { return hasChanges } }

            steps {
                script {
                    libs.buildAndDeploy()
                }
            }
        }

        // 최종 완료 stage
        stage("Finalize") {
            steps {
                script {
                    //--소스변경이 없는 경우 성공 처리
                    if (!hasChanges) {
                        currentBuild.result = 'SUCCESS'
                        currentBuild.description = "No pipeline performed because no sources changed"
                    }
                    echo "Finish All processed !!!"
                }
            }
        }
    }
}

