@Library('pipeline_shared_library') _
def libs = pipelineLibraries(this)

pipeline {
    agent any
    options { quietPeriod(0) }

    stages {
       def hasChanges = false

        stage("Set Global variables") {
            steps {
                script { libs.setGlobalVariables(serviceGroup, serviceId, version) }
            }
        }

        stage("Prepare Environment") {
            steps {
                script { hasChanges = libs.prepareEnvironment() }
                echo "End of Prepare Environment"
            }
        }

        stage("Build and Deploy") {
            when { expression { return hasChanges } }
            script { libs.buildAndDeploy() }
        }

        stage("Finalize") {
            script { libs.finilizePipeline() }
        }
    }
}