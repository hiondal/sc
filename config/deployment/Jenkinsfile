//-- load library: system설정의 Global Trusted Libraries에 Library 등록
//-- 주의: 아래 처럼 맨 끝에 '_'를 붙여야 함
@Library('pipeline_shared_library') _
echo "***** Library loaded successfully *****"
def common = new commonFunctions()

//--전역변수 셋팅: 서비스그룹, 서비스ID, 버전
common.setGlobalVariables("sc", "config", "1.0.0")

//-- 실행환경 준비
stage("Prepare Environment") {
    prepareEnvironment()
}

//-- Run CI/CD
stage("Build and Deploy") {
    setPodTemplates()

    {
        node("${PIPELINE_ID}") {
            stage("Get Source") {
                checkout scm
            }

            //---- 소스 변경 여부 검사
            if (!checkSourceChanges()) return

            notifySlack("STARTED", "#FFFF00")

            //-- 실행을 위한 변수 셋팅
            setCICDVariables()

            //-- 개발 시 CI/CD를 빠르게 하기 위해 일부 Stage Skip(sona,trivy 지정 가능)
            def skipStages = ""

            try {
                //Build: build jar
                stageBuildJar()

                if(!skipStages.contains("sona")) {
                    //-- Build: 소스품질 검사
                    stageSonarQubeAnalysisForJava()

                    //-- Build: Quality Gate 충족 검사
                    stageVerifyQualityGate()
                }

                //-- Build: Build Container image
                stageBuildContainerImageForJava()

                //-- Build: image 보안 취약성 점검
                if(!skipStages.contains("trivy")) {
                    stageScanContainerImageVulnurability()
                }

                //-- Release:  Push Container image
                stagePushContainerImage()

                //-- Deploy: 배포 manifest 파일 생성
                stageGenerateManifest()

                //-- Deploy: 배포
                stageDeploy()

                notifySlack("${currentBuild.currentResult}", "#00FF00")
                echo "**** FINISH ALL STAGES : SUCCESS"
            } catch(e) {
                currentBuild.result = "FAILED"
                notifySlack("${currentBuild.currentResult}", "#FF0000")
            }
        }
    }
}