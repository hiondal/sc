//-- load library: system설정의 Global Trusted Libraries에 Library 등록
//-- 주의: 아래 처럼 맨 끝에 '_'를 붙여야 함
@Library('pipeline_shared_library') _
echo "***** Library loaded successfully *****"
def libs = pipelineLibraries(this)

//--전역변수 셋팅: 서비스그룹, 서비스ID, 버전
libs.setGlobalVariables("sc", "config", "1.0.0")

//-- 실행환경 준비
stage("Prepare Environment") {
	libs.prepareEnvironment()

    stage("Get Source") {
        checkout scm
    }

    //---- 소스 변경 여부 검사
    if (!libs.checkSourceChanges()) {
        currentBuild.result = 'SUCCESS'
        currentBuild.description = "소스 변경이 없어 수행하지 않음"
        return
    }
}

//-- Run CI/CD
stage("Build and Deploy") {
	//libs.setPodTemplates()
	def volumes = [
		nfsVolume(mountPath: "/${libs.envVars.TRIVY_CACHE_DIR}", serverAddress: "${libs.envVars.NFS_HOST}", serverPath: "/${libs.envVars.NFS_DIR}/${libs.envVars.TRIVY_CACHE_DIR}/${libs.envVars.SRC_DIR}", readOnly: false)
	]
	if (libs.envVars.SERVICE_GROUP == libs.envVars.SERVICE_GROUP_SC || libs.envVars.SERVICE_GROUP == libs.envVars.SERVICE_GROUP_SUBRIDE) {
		volumes.add(
			nfsVolume(mountPath: "/home/gradle/.gradle", serverAddress: "${libs.envVars.NFS_HOST}", serverPath: "/${libs.envVars.NFS_DIR}/${libs.envVars.GRADLE_CACHE_DIR}/${libs.envVars.SRC_DIR}", readOnly: false)
		)
	}
	podTemplate(
		label: "${libs.envVars.PIPELINE_ID}",
		containers: [
			containerTemplate(name: "trivy", image: "aquasec/trivy", ttyEnabled: true, command: "cat"),
			containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", command: "cat", ttyEnabled: true),
			containerTemplate(name: "gradle", image: "gradle:jdk17", ttyEnabled: true, command: "cat"),
			containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
			containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h')
		],
		volumes: volumes
	)
	{
		node("${libs.envVars.PIPELINE_ID}") {

			libs.notifySlack("STARTED", "#FFFF00")

			//-- 실행을 위한 변수 셋팅
			libs.setCICDVariables()

			//-- 개발 시 CI/CD를 빠르게 하기 위해 일부 Stage Skip(sona,trivy 지정 가능)
			def skipStages = "sonar, trivy"

			try {
				//Build: build jar
				stage("Build Jar") {
					libs.buildJar()
				}

				if(!skipStages.contains("sona")) {
					//-- Build: 소스품질 검사
					stage("SonarQube Analysis") {
						libs.sonarQubeAnalysisForJava()
					}

					//-- Build: Quality Gate 충족 검사
					stage("Verify Quality Gate") {
						libs.verifyQualityGate()
					}
				}

				//-- Build: Build Container image
				stage("Build Container Image") {
					libs.buildContainerImageForJava()
				}

				//-- Build: image 보안 취약성 점검
				if(!skipStages.contains("trivy")) {
					stage("Scan Image Vulnerability") {
						libs.scanContainerImageVulnerability()
					}
				}

				//-- Release: Push Container image
				stage("Push Container Image") {
					libs.pushContainerImage()
				}

				//-- Deploy: 배포 manifest 파일 생성
				stage("Generate Manifest") {
					libs.generateManifest()
				}

				//-- Deploy: 배포
				stage("Deploy") {
					//libs.deploy()
				}

				libs.notifySlack("${currentBuild.currentResult}", "#00FF00")
				echo "**** FINISH ALL STAGES : SUCCESS"
			} catch(e) {
				currentBuild.result = "FAILED"
				libs.notifySlack("${currentBuild.currentResult}", "#FF0000")
			}
		}
	}
}